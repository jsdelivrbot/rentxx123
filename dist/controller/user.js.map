{"version":3,"sources":["../../src/controller/user.js"],"names":["config","db","api","post","req","res","console","log","body","fname","newUser","lname","email","password","college","city","save","err","user","name","code","status","send","succes","message","transporter","createTransport","service","auth","pass","templateString","readFileSync","vaerificationAddress","myurl","emailverificationkey","join","__dirname","mailOptions","from","to","subject","html","render","heading","link","sendMail","info","json","put","findOne","params","delete","findById","id","undefined","login","token","userType","remove","get","key","emailverified"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport nodemailer from 'nodemailer';\nimport ejs from 'ejs';\nimport path from 'path';\nimport fs from 'fs';\nimport { Router } from 'express';\nimport User from '../model/user';\nimport Login from '../model/login';\nimport bodyParser from 'body-parser';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // '/v1/user/add'\n  api.post('/add', (req, res) => {\n    console.log(\"hello \"+req.body.fname);\n    let newUser = new User();\n    newUser.fname = req.body.fname;\n    newUser.lname = req.body.lname;\n    newUser.email = req.body.email;\n    newUser.password=req.body.password;\n    newUser.college=req.body.college;\n    newUser.city=req.body.city;\n    newUser.save(function(err,user) {\n      if (err) {\n        if (err.name === 'MongoError' && err.code === 11000) {\n          // Duplicate email\n          return res.status(500).send({ succes: false, message: 'User already exist!' });\n        }\n  \n        // Some other error\n        return res.status(500).send(err);\n      }\n      //sending mail \nvar transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: 'toshikverma1@gmail.com', // Your email id\n    pass: '123123123a' // Your password\n  }\n});\nvar templateString = fs.readFileSync('views/verify.ejs', 'utf-8');\nlet vaerificationAddress=config.myurl+\"user/verify/\"+user.emailverificationkey+\"/\"+user.email\nconsole.log(path.join(__dirname,'/views/welcome.ejs'));\nvar mailOptions = {\n  from: 'toshikverma@gmail.com', // sender address\n  to: user.email, // list of receivers\n  subject: 'Verification Email', // Subject line\n  html: ejs.render(templateString,{heading:\"Verification Email\",name:user.fname,link:vaerificationAddress},(err)=>{\n    if(err){\n      console.log(err);\n    }\n  }) \n  // html: ejs.renderFile(path.join(__dirname,'/views/welcome.ejs'),{heading:\"Verification Email\",body:\"test body\"}) //, // plaintext body\n  // html: '<b>Hello world âœ”</b>' // You can choose to send an HTML body instead\n};\ntransporter.sendMail(mailOptions, function (err, info) {\n  if(err)\n    console.log(err)\n   \n  else\n    console.log(info);\n});\n//sending mail ends\n      res.json({ message: 'User saved successfully' });\n    });\n  });\n  \n       //updating user\n       api.put('/update/:email',(req,res)=>{\n        User.findOne({email: req.params.email}, function(err, user) {\n          if(!err) {\n            if(user===null){\n              res.json({ message: 'User not found!' });\n  \n            }else{\n              user.fname=req.body.fname;\n              user.lname=req.body.lname;\n              user.save(function(err,user) {\n                  if(err){\n\n                    res.send(err);\n                  }\n                  res.json({ message: 'User updated successfully' });\n                  \n              });\n            }\n          }else{\n\n            res.send(err);\n          }\n      });\n    });\n    //deleting a user\n   api.delete('/delete/:id',(req,res)=>{\n    //check password or match password\n    User.findById((req.params.id),(err,user)=>{\n      if(user==undefined){\n       res.status(400).json({ message: 'User not found!' });\n   }else{\nLogin.findOne({email:req.body.email},(err,login)=>{\n\n   if(!err){\n\n       if(login==undefined){ //user not found\n\n           res.status(400).json({ message: 'User not Logged In!' });\n       }else{\n\n           if(login.token==req.body.token && login.userType==3){  //token matching\n           \n            user.remove((err)=>{\n\n              if(err){\n                res.status(500).send(err);\n              }else{\n\n\n                res.status(200).json({message:\"user removed!\"});\n              }\n            });\n           }else{\n\n            res.status(400).send({message:\"you are not authorized for moderation!\"});\n           }\n          }\n        }else{\n\n          res.status(500).send(err);\n        }\n          });\n        }\n  });\n});\n    //promoting as moderator\n    api.put('/promote/:id',(req,res)=>{\n      //check password or match password\n      User.findById((req.params.id),(err,user)=>{\n        if(user==undefined){\n         res.status(400).json({ message: 'User not found!' });\n     }else{\n Login.findOne({email:req.body.email},(err,login)=>{\n \n     if(!err){\n \n         if(login==undefined){ //user not found\n \n             res.status(400).json({ message: 'User not Logged In!' });\n         }else{\n \n             if(login.token==req.body.token && login.userType==3){  //token matching\n              user.userType=2;\n              user.save((err)=>{\n\n                if(err){\n                  res.status(500).send(err);\n                }else{\n\n\n                  res.status(200).json({message:\"upgraded!\"});\n                }\n              });\n             }else{\n\n              res.status(400).send({message:\"you are not authorized for moderation!\"});\n             }\n            }\n          }else{\n\n            res.status(500).send(err);\n          }\n            });\n          }\n    });\n  });\n   //demoting as moderator\n   api.put('/demote/:id',(req,res)=>{\n    //check password or match password\n    User.findById((req.params.id),(err,user)=>{\n      if(user==undefined){\n       res.status(400).json({ message: 'User not found!' });\n   }else{\nLogin.findOne({email:req.body.email},(err,login)=>{\n\n   if(!err){\n\n       if(login==undefined){ //user not found\n\n           res.status(400).json({ message: 'User not Logged In!' });\n       }else{\n\n           if(login.token==req.body.token && login.userType==3){  //token matching\n            user.userType=0;\n            user.save((err)=>{\n\n              if(err){\n                res.status(500).send(err);\n              }else{\n\n\n                res.status(200).json({message:\"demoted!\"});\n              }\n            });\n           }else{\n\n            res.status(400).send({message:\"you are not authorized for moderation!\"});\n           }\n          }\n        }else{\n\n          res.status(500).send(err);\n        }\n          });\n        }\n  });\n});\n //updating user\n api.get('/verify/:key/:email',(req,res)=>{\n  User.findOne({email: req.params.email}, function(err, user) {\n    if(!err) {\n      if(user===null){\n        res.status(400).json({ message: 'User not found!' });\n\n      }else{\n       if(user.emailverificationkey===req.params.key){\n          user.emailverified=1;\n          user.save((err)=>{\n            if(!err){\n //sending mail \n var transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n      user: 'toshikverma1@gmail.com', // Your email id\n      pass: '123123123a' // Your password\n  }\n});\nvar templateString = fs.readFileSync('views/welcome.ejs', 'utf-8');\nvar mailOptions = {\n  from: 'toshikverma@gmail.com', // sender address\n  to: user.email, // list of receivers\n  subject: 'Email Verified!', // Subject line\n  html: ejs.render(templateString,{heading:\"Welcome Email verified!\",name:user.fname},(err)=>{\n    if(err){\n      console.log(err);\n    }\n  }) \n  // html: ejs.renderFile(path.join(__dirname,'/views/welcome.ejs'),{heading:\"Verification Email\",body:\"test body\"}) //, // plaintext body\n  // html: '<b>Hello world âœ”</b>' // You can choose to send an HTML body instead\n};\ntransporter.sendMail(mailOptions, function (err, info) {\n  if(err)\n    console.log(err)\n\n  else\n    console.log(info);\n});\n//sending mail ends\n              res.status(200).json({message:\"user verified!\"});\n            }else{\n\n              res.status(500).send(err);\n            }\n\n          });\n\n       }else{\n        res.status(400).json({ message: 'invalid verification key' });\n\n       }\n      }\n    }else{\n\n      res.send(err);\n    }\n});\n});\n  return api;\n}\n"]}