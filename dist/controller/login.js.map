{"version":3,"sources":["../../src/controller/login.js"],"names":["config","db","api","post","req","res","findOne","email","body","err","user","undefined","status","json","message","password","emailverified","loginDetails","newLogin","userType","save","loginDetailsAfterSaving","send","token","userdetails","delete","params","login","remove"],"mappings":"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","file":"login.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Login from '../model/login';\r\nimport User from '../model/user';\r\nimport bodyParser from 'body-parser';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n\r\n  // '/v1/login/add'\r\n  api.post('/add', (req, res) => {\r\n   //check password or match password\r\nUser.findOne({email:req.body.email},(err,user)=>{\r\n\r\n    if(!err){\r\n\r\n        if(user==undefined){ //user not found\r\n\r\n            res.status(400).json({ message: 'User not found!' });\r\n        }else{\r\n\r\n            if(user.password===req.body.password){  //password matching\r\n               if(user.emailverified==1){\r\n        //checking if user is already logged in\r\n        Login.findOne({email:req.body.email},(err,loginDetails)=>{\r\n\r\n            if(!err){\r\n                if(loginDetails===null){ //user is not already logged in\r\n                        //saving login new details\r\n                    let newLogin=new Login();\r\n                    newLogin.email=req.body.email;\r\n                    newLogin.userType=user.userType;\r\n                    newLogin.save((err,loginDetailsAfterSaving)=>{\r\n\r\n                        if(err){\r\n\r\n                            res.status(500).send(err);\r\n                        }\r\n\r\n                        res.status(200).json({token:loginDetailsAfterSaving.token,userdetails:user});\r\n                    });\r\n\r\n                }else{  //user is already logged in\r\n                    res.status(200).json({token:loginDetails.token});\r\n\r\n                }\r\n\r\n            }else{\r\n\r\n                res.status(500).send(err);\r\n            }\r\n        \r\n\r\n        });\r\n    }else{\r\n        res.status(400).json({ message: 'user not verified!' });\r\n\r\n    }\r\n            }else{\r\n                res.status(400).json({ message: 'invalid password!' });\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n});\r\n  });\r\n  //logging out a user\r\n    api.delete('/logout/:email',(req,res)=>{\r\n      Login.findOne({email: req.params.email}, function(err, login) {\r\n        if(!err) {\r\n          if(login===null){\r\n            res.status(400).json({ message: 'User not found!' });\r\n\r\n          }else{\r\n              if(login.token===req.body.token){\r\n            login.remove(function(err) {\r\n                if(err){\r\n\r\n                  res.send(err);\r\n                }\r\n                res.status(200).json({ message: 'User logged out successfully' });\r\n                \r\n            });\r\n        }else{\r\n            res.status(400).json({ message: 'Wrong token' });\r\n\r\n        }\r\n          }\r\n        }else{\r\n\r\n          res.status(500).send(err);\r\n        }\r\n    });\r\n\r\n    })\r\n  return api;\r\n}\r\n"]}