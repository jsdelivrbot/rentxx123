{"version":3,"sources":["../../src/controller/chat.js"],"names":["config","db","api","post","req","res","findOne","email","body","err","user","undefined","status","json","message","login","token","newChat","from","_id","towards","chatId","parseInt","save","$and","userId","$or","saw","notification","newNotification","description","fname","type","refId","link","findById","ownerUser","transporter","createTransport","service","auth","pass","templateString","readFileSync","mailOptions","to","subject","html","render","heading","name","byperson","console","log","sendMail","info","time","Date","now","send","params","find","chat"],"mappings":"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","file":"chat.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Login from '../model/login';\r\nimport User from '../model/user';\r\nimport Chat from '../model/chat';\r\nimport nodemailer from 'nodemailer';\r\nimport fs from 'fs';\r\nimport ejs from 'ejs';\r\nimport Notification from '../model/notification';\r\nimport bodyParser from 'body-parser';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n//adding a category\r\n//v1/chat/add\r\n  api.post('/add', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token ){  //token matching and only admin can add\r\n                let newChat=new Chat();\r\n               newChat.from=user._id;\r\n               newChat.towards=req.body.towards;\r\n             \r\n               newChat.chatId = parseInt(user._id, 16) > parseInt(req.body.towards, 16) ? user._id + req.body.towards : req.body.towards + user._id;\r\n               newChat.message=req.body.message;\r\n               newChat.save((err)=>{\r\n\r\n                if(!err){\r\n                    Notification.findOne({\r\n                        \r\n                        $and: [\r\n                            { userId:req.body.towards },\r\n                            { $or: [{ saw:1 }, { saw:0 }] }\r\n                        ]},(err,notification)=>{\r\n\r\n                        if(!err){\r\n\r\n                            if(notification==null){\r\n                                let newNotification=new Notification();\r\n                                newNotification.userId=req.body.towards;\r\n                                newNotification.message=\"You have a message!\"\r\n                                newNotification.description=\"Message recieved from \"+user.fname;\r\n                                newNotification.type=1;\r\n                                newNotification.refId=user._id;\r\n                                newNotification.link=\"/chat\";\r\n                                newNotification.save();\r\n                                User.findById((req.body.towards),(err,ownerUser)=>{\r\n                                    \r\n                                                                                    if(!err){\r\n                                                                                    \r\n  //sending mail \r\n  var transporter = nodemailer.createTransport({\r\n    service: 'Gmail',\r\n    auth: {\r\n    user: 'toshikverma1@gmail.com', // Your email id\r\n    pass: '123123123a' // Your password\r\n    }\r\n});\r\nvar templateString = fs.readFileSync('views/chat.ejs', 'utf-8');\r\nvar mailOptions = {\r\n    from: 'toshikverma@gmail.com', // sender address\r\n    to: ownerUser.email, // list of receivers\r\n    subject: 'Message Recieved!', // Subject line\r\n    html: ejs.render(templateString,{heading:\"Message Recieved!\",name:ownerUser.fname,message:req.body.message,byperson:user.fname},(err)=>{\r\n    if(err){\r\n        console.log(err);\r\n    }\r\n    }) \r\n    \r\n};\r\ntransporter.sendMail(mailOptions, function (err, info) {\r\n    if(err)\r\n    console.log(err)\r\n    \r\n    else\r\n    console.log(info);\r\n});\r\n//sending mail ends\r\n         }});\r\n                            }else{\r\n                                \r\n                                notification.saw=0;\r\n                                notification.time=Date.now();\r\n                                notification.save();\r\n                            }\r\n                        }\r\n\r\n                    });\r\n                   \r\n                    res.status(200).send({message:\"chat added!\"});\r\n                }else{\r\n                    res.status(500).send(err);\r\n                }\r\n               });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n//v1/chat/get\r\napi.post('/get/:userId', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token ){  //token matching and only admin can add\r\n                \r\n                let chatId = parseInt(user._id, 16) > parseInt(req.params.userId, 16) ? user._id + req.params.userId : req.params.userId + user._id;\r\n                    \r\n                   Chat.find({chatId:chatId},(err,chat)=>{\r\n                    if(!err){\r\n                        if(chat===undefined){\r\n\r\n                            res.status(400).json({message:\"no chat found!\"});\r\n                        }else{\r\n\r\n                            res.status(200).json(chat);\r\n                        }\r\n\r\n                    }else{\r\n\r\n                        res.status(500).send(err);\r\n                    }\r\n\r\n                   }); \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n  return api;\r\n}\r\n"]}