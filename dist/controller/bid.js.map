{"version":3,"sources":["../../src/controller/bid.js"],"names":["config","db","api","post","req","res","findOne","email","body","err","user","undefined","status","json","message","login","token","_id","productId","product","send","newBid","amount","days","userId","description","userName","productName","productById","save","bid","newNotification","type","refId","link","findById","ownerUser","transporter","createTransport","service","auth","pass","templateString","readFileSync","mailOptions","from","to","subject","html","render","heading","name","fname","byperson","console","log","sendMail","info","put","params","id","equals","userType","lastedit","Date","delete","remove","isSpam","get","sort","sortby","indexOf","pageNumber","isNaN","page","qry","JSON","parse","decodeURIComponent","query","countQuery","callback","find","doc","length","retrieveQuery","skip","limit","exec","parallel","results","total_pages","Math","floor","bids"],"mappings":"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","file":"bid.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Login from '../model/login';\r\nimport Product from '../model/product';\r\nimport Bid from '../model/bid';\r\nimport User from '../model/user';\r\nimport nodemailer from 'nodemailer';\r\nimport async from 'async';\r\nimport fs from 'fs';\r\nimport ejs from 'ejs';\r\nimport Notification from '../model/notification';\r\nimport bodyParser from 'body-parser';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n\r\n  // '/v1/bid/add/emailID'\r\n  api.post('/add', (req, res) => {\r\n   //check token match token\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token){  //token matching\r\n                Product.findOne({_id:req.body.productId},(err,product)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(product===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such product exsist\"});\r\n                                }else{\r\n                            \r\n                                    let newBid= new Bid();\r\n                                    newBid.amount=req.body.amount;\r\n                                    newBid.days=req.body.days;\r\n                                    newBid.productId=req.body.productId;\r\n                                    newBid.userId=user._id;\r\n                                    newBid.description=req.body.description;\r\n                                    newBid.userName=req.body.userName;\r\n                                    newBid.productName=req.body.productName;\r\n                                    newBid.productById=product.userId;\r\n                                    newBid.save((err,bid)=>{\r\n\r\n                                        if(!err){\r\n                                            let newNotification=new Notification();\r\n                                            newNotification.userId=product.userId;\r\n                                            newNotification.message=\"Bid added!\"\r\n                                            newNotification.description=\"You have recieved Bid on \"+product.productName;\r\n                                            newNotification.type=3;\r\n                                            newNotification.refId=product._id;\r\n                                            newNotification.link=\"/product\";\r\n                                            newNotification.save();\r\n                                            User.findById((product.userId),(err,ownerUser)=>{\r\n\r\n                                                if(!err){\r\n                                                //sending mail \r\n                                                var transporter = nodemailer.createTransport({\r\n                                                    service: 'Gmail',\r\n                                                    auth: {\r\n                                                    user: 'toshikverma1@gmail.com', // Your email id\r\n                                                    pass: '123123123a' // Your password\r\n                                                    }\r\n                                                });\r\n                                                var templateString = fs.readFileSync('views/bidrecieved.ejs', 'utf-8');\r\n                                                var mailOptions = {\r\n                                                    from: 'toshikverma@gmail.com', // sender address\r\n                                                    to: ownerUser.email, // list of receivers\r\n                                                    subject: 'Bid Recieved!', // Subject line\r\n                                                    html: ejs.render(templateString,{heading:\"Bid Recieved!\",name:ownerUser.fname,productName:product.productName,byperson:user.fname},(err)=>{\r\n                                                    if(err){\r\n                                                        console.log(err);\r\n                                                    }\r\n                                                    }) \r\n                                                    \r\n                                                };\r\n                                                transporter.sendMail(mailOptions, function (err, info) {\r\n                                                    if(err)\r\n                                                    console.log(err)\r\n                                                    \r\n                                                    else\r\n                                                    console.log(info);\r\n                                                });\r\n                                                //sending mail ends\r\n\r\n                                                }else{\r\n                                                    console.log(err);\r\n                                                }\r\n                                            });\r\n                                             \r\n                                            res.status(200).json(bid);\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"bid was not saved\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                               \r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n   // '/v1/bid/update/bidId \r\n  api.put('/update/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found in login table\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token){  //token matching\r\n                Bid.findOne({_id:req.params.id},(err,bid)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(bid===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such bid exsist\"});\r\n                                }else{\r\n                                    if(user._id.equals(bid.userId) || login.userType>0){ //here user who created the product can make changes and the admin\r\n                \r\n                                    bid.amount=req.body.amount;\r\n                                    bid.days=req.body.days;\r\n                                    bid.description=req.body.description;\r\n                                    bid.lastedit=Date();\r\n                                    bid.save((err,bid)=>{\r\n\r\n                                        if(!err){\r\n\r\n                                            res.status(200).send(bid);\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"bid was not saved\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                                }else{\r\n                                    \r\n                                      res.status(400).send({message:\"not authorized to update bid\"});\r\n                                     }\r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n    // '/v1/bid/delete/bidId \r\n  api.delete('/delete/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found in login table\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token){  //token matching\r\n                Bid.findOne({_id:req.params.id},(err,bid)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(bid===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such bid exsist\"});\r\n                                }else{\r\n                                    if(user._id.equals(bid.userId) || login.userType>0){ //here user who created the product can make changes and the admin\r\n                \r\n                                    \r\n                                    bid.remove((err,bid)=>{\r\n\r\n                                        if(!err){\r\n\r\n                                            res.status(200).json({message:\"bid deleted successfully!\"});\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"bid was not deleted\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                                }else{\r\n                                    \r\n                                      res.status(400).send({message:\"not authorized to update bid\"});\r\n                                     }\r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n   // '/v1/bid/marasspam/bidId \r\n   api.put('/markasspam/:id', (req, res) => {\r\n    //check tokenr match token\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token){  //token matching\r\n                Product.findOne({_id:req.body.productId},(err,product)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(product===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such product exsist\"});\r\n                                }else{\r\n                                    Bid.findOne({_id:req.params.id},(err,bid)=>{\r\n                                        if(bid===undefined){\r\n                                            \r\n                                                                                res.status(400).send({message:\"no such bid exsist\"});\r\n                                                                            }else{\r\n                                if(user._id.equals(product.userId)){    \r\n                                    bid.isSpam=1;\r\n                                    bid.save((err,bid)=>{\r\n\r\n                                        if(!err){\r\n\r\n                                            res.status(200).json({message:\"marked as spam!\"});\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"bid was not saved\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n                                }else{\r\n                                    \r\n                                        res.status(400).json({message:\"you are not authorized to edit bid\"});\r\n                                    }\r\n                                }\r\n                                });\r\n                                    }\r\n                            \r\n                               \r\n\r\n                                            }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n                    \r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n    //GET BIDS BY DYNAMIC QUERY\r\n    api.get('/dynamic/:token/:query/:sortby/:page', (req, res) => {\r\n        //check token\r\n          Login.findOne({token:req.params.token},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not Login!' },);\r\n         }else{\r\n                let sort=[\"lastEdit\",\"rating\"];\r\n                let sortby=\"lastEdit\";\r\n                if(sort.indexOf(req.params.sortby) > -1){\r\n\r\n                    sortby=req.params.sortby;\r\n                }\r\n                //checking if page number is correct\r\n                let pageNumber=1\r\n        \r\n                if(!isNaN(req.params.page)){\r\n                   pageNumber=req.params.page;\r\n                 }\r\n                 //async query start here\r\n                 \r\n                 let qry=JSON.parse(decodeURIComponent(req.params.query));\r\n                 var countQuery = function(callback){\r\n                    Bid.find(qry, function(err, doc){\r\n                          if(err){ callback(err, null) }\r\n                          else{\r\n                              callback(null, doc.length);\r\n                           }\r\n                    }\r\n                    )};\r\n            \r\n               var retrieveQuery = function(callback){\r\n                   Bid.find(qry).skip((pageNumber-1)*12).sort({[sortby]: -1}).limit(12).exec(function(err, doc){\r\n                    if(err){ callback(err, null) }\r\n                    else{\r\n                        callback(null, doc);\r\n                     }\r\n              });\r\n                   \r\n              };\r\n            \r\n               async.parallel([countQuery, retrieveQuery], function(err, results){\r\n                   if(err){\r\n                   // console.log(\"error here\");\r\n                    res.status(500).send(err);\r\n                   }else{\r\n                    res.status(200).json({total_pages:Math.floor(results[0]/12+1) , page: pageNumber, bids: results[1]});\r\n                   }\r\n               });\r\n            \r\n         }\r\n                 });\r\n       });       \r\n   return api;\r\n}\r\n"]}