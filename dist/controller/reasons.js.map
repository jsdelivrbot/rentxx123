{"version":3,"sources":["../../src/controller/reasons.js"],"names":["config","db","api","post","req","res","findOne","email","body","err","user","undefined","status","json","message","login","token","userType","newreasons","name","save","reasons","send","put","findById","params","id","delete","remove","find"],"mappings":"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","file":"reasons.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Login from '../model/login';\r\nimport User from '../model/user';\r\nimport Product from '../model/product';\r\nimport Reasons from '../model/reasons';\r\nimport bodyParser from 'body-parser';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n//adding a reasons\r\n//v1/reasons/add\r\n  api.post('/add', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token && user.userType>0){  //token matching and only admin can add\r\n               let newreasons=new Reasons();\r\n               newreasons.name=req.body.name;\r\n               newreasons.save((err,reasons)=>{\r\n\r\n                if(!err){\r\n\r\n                    res.status(200).send(reasons);\r\n                }else{\r\n                    res.status(500).send(err);\r\n                }\r\n               });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n//v1/reasons/update\r\n  api.put('/update/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token && user.userType>0){  //token matching and only admin can add\r\n              \r\n\r\n              Reasons.findById((req.params.id),(err,reasons)=>{\r\n\r\n                    if(!err){\r\n                        if(reasons===undefined){\r\n                            res.status(400).send({message:\"no such reasons exsist!\"});\r\n\r\n                        }else{\r\n                        reasons.name=req.body.name;\r\n                        reasons.save((err)=>{\r\n\r\n                            if(err){\r\n\r\n                                res.status(500).send(err);\r\n                            }else{\r\n\r\n                                res.status(200).send({message:\"reasons updated!\"});\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                    }else{\r\n\r\n                        res.status(500).send(err);\r\n                    }\r\n\r\n              });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n   //v1/reasons/delete\r\n  api.delete('/delete/:id/:token/:email', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.params.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.params.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.params.token && user.userType>0){  //token matching and only admin can add\r\n              \r\n\r\n              Reasons.findById((req.params.id),(err,reasons)=>{\r\n\r\n                    if(!err){\r\n                        if(reasons===undefined){\r\n                            res.status(400).send({message:\"no such reasons exsist!\"});\r\n\r\n                        }else{\r\n                        reasons.remove((err)=>{\r\n\r\n                            if(!err){\r\n\r\n                                res.status(200).send({message:\"reasons deleted!\"});\r\n                            }else{\r\n\r\n                                res.status(500).send(err);\r\n                            }\r\n                        });\r\n                    }\r\n                    }else{\r\n\r\n                        res.status(500).send(err);\r\n                    }\r\n\r\n              });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n//get reasons here\r\n    api.post('/get', (req, res) => {\r\n      Reasons.find({}, function(err, reasons) {\r\n        res.json({\"cities\":reasons});\r\n    });\r\n});\r\n  return api;\r\n}\r\n"]}