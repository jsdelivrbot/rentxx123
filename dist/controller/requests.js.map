{"version":3,"sources":["../../src/controller/requests.js"],"names":["config","db","api","post","req","res","findOne","email","params","err","user","undefined","status","json","message","login","token","body","newRequest","requestName","numberOfDays","description","referenceLink","college","city","userId","_id","lastEdit","Date","save","request","newNotification","type","refId","link","transporter","createTransport","service","auth","pass","templateString","readFileSync","mailOptions","from","to","subject","html","render","heading","name","fname","productName","console","log","sendMail","info","send","put","id","equals","userType","delete","remove","requestApproved","findById","ownerUser","linkApproved","imageApproved","reason","get","sort","sortby","indexOf","pageNumber","isNaN","page","qry","JSON","parse","decodeURIComponent","query","countQuery","callback","Product","find","doc","length","retrieveQuery","skip","limit","exec","parallel","results","total_pages","Math","floor","products","RegExp","search"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBACc,gBAAoB;AAAA,QAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;AAChC,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,IAAJ,CAAS,aAAT,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAII,MAAJ,CAAWD,KAAlB,EAAb,EAAsC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAChD,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAII,MAAJ,CAAWD,KAAlB,EAAd,EAAuC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAEhD,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAED,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAzB,EAA+B;AAAG;;AAE1B,oCAAIE,aAAW,wBAAf;AACAA,2CAAWC,WAAX,GAAuBf,IAAIa,IAAJ,CAASE,WAAhC;AACD;AACCD,2CAAWE,YAAX,GAAwBhB,IAAIa,IAAJ,CAASG,YAAjC;AACAF,2CAAWG,WAAX,GAAuBjB,IAAIa,IAAJ,CAASI,WAAhC;AACAH,2CAAWI,aAAX,GAAyBlB,IAAIa,IAAJ,CAASK,aAAlC;AACAJ,2CAAWK,OAAX,GAAmBb,KAAKa,OAAxB;AACAL,2CAAWM,IAAX,GAAgBd,KAAKc,IAArB;AACAN,2CAAWO,MAAX,GAAkBf,KAAKgB,GAAvB;AACAR,2CAAWS,QAAX,GAAoBC,MAApB;AACAV,2CAAWW,IAAX,CAAgB,UAACpB,GAAD,EAAKqB,OAAL,EAAe;;AAE3B,wCAAG,CAACrB,GAAJ,EAAQ;AACJ,4CAAIsB,kBAAgB,4BAApB;AACAA,wDAAgBN,MAAhB,GAAuBf,KAAKgB,GAA5B;AACAK,wDAAgBjB,OAAhB,GAAwB,iBAAxB;AACAiB,wDAAgBV,WAAhB,GAA4B,iBAAeS,QAAQX,WAAvB,GAAmC,iEAA/D;AACAY,wDAAgBC,IAAhB,GAAqB,CAArB;AACAD,wDAAgBE,KAAhB,GAAsBH,QAAQJ,GAA9B;AACAK,wDAAgBG,IAAhB,GAAqB,WAArB;AACC;AACA,4CAAIC,cAAc,qBAAWC,eAAX,CAA2B;AAC1CC,qDAAS,OADiC;AAE1CC,kDAAM;AACN5B,sDAAM,wBADA,EAC0B;AAChC6B,sDAAM,YAFA,CAEa;AAFb;AAFoC,yCAA3B,CAAlB;AAOD,4CAAIC,iBAAiB,aAAGC,YAAH,CAAgB,qBAAhB,EAAuC,OAAvC,CAArB;AACA,4CAAIC,cAAc;AACdC,kDAAM,uBADQ,EACiB;AAC/BC,gDAAIlC,KAAKH,KAFK,EAEE;AAChBsC,qDAAS,eAHK,EAGY;AAC1BC,kDAAM,cAAIC,MAAJ,CAAWP,cAAX,EAA0B,EAACQ,SAAQ,kBAAT,EAA4BC,MAAKvC,KAAKwC,KAAtC,EAA4CpC,SAAQ,8CAApD,EAAmGqC,aAAY/C,IAAIa,IAAJ,CAASE,WAAxH,EAA1B,EAA+J,UAACV,GAAD,EAAO;AAC5K,oDAAGA,GAAH,EAAO;AACH2C,4DAAQC,GAAR,CAAY5C,GAAZ;AACH;AACA,6CAJK;;AAJQ,yCAAlB;AAWA0B,oDAAYmB,QAAZ,CAAqBZ,WAArB,EAAkC,UAAUjC,GAAV,EAAe8C,IAAf,EAAqB;AACnD,gDAAG9C,GAAH,EACA2C,QAAQC,GAAR,CAAY5C,GAAZ,EADA,KAIA2C,QAAQC,GAAR,CAAYE,IAAZ;AACH,yCAND;AAOA;AACAxB,wDAAgBF,IAAhB;AACIxB,4CAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiB,OAArB;AAEP,qCAvCD,MAuCK;;AAEGzB,4CAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAQ,oBAAT,EAArB;AACP;AACJ,iCA7CD;AAiDP,6BA7DD,MA6DK;AACDT,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBA3ED,MA2EK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBAlFD;AAmFK;AACQ,SAxFR;AAyFF,KA3FD;;AA6FA;;AAEAP,QAAIuD,GAAJ,CAAQ,aAAR,EAAuB,UAACrD,GAAD,EAAMC,GAAN,EAAc;AACnC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAED,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAzB,EAA+B;AAAG;AAC/B,mDAASV,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;AACNsC,oDAAQC,GAAR,CAAY3C,KAAKgB,GAAjB;AACA0B,oDAAQC,GAAR,CAAYvB,QAAQL,MAApB;AACK,gDAAGf,KAAKgB,GAAL,CAASiC,MAAT,CAAgB7B,QAAQL,MAAxB,KAAmCV,MAAM6C,QAAN,GAAe,CAArD,EAAuD;AACvD9B,wDAAQX,WAAR,GAAoBf,IAAIa,IAAJ,CAASE,WAA7B;AACAW,wDAAQV,YAAR,GAAqBhB,IAAIa,IAAJ,CAASG,YAA9B;AACAU,wDAAQT,WAAR,GAAoBjB,IAAIa,IAAJ,CAASI,WAA7B;AACAS,wDAAQR,aAAR,GAAsBlB,IAAIa,IAAJ,CAASK,aAA/B;AACAQ,wDAAQH,QAAR,GAAiBC,MAAjB;AACAE,wDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAKqB,OAAL,EAAe;;AAExB,wDAAG,CAACrB,GAAJ,EAAQ;;AAEJJ,4DAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB1B,OAArB;AACH,qDAHD,MAGK;;AAEDzB,4DAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,uBAAT,EAArB;AACH;AAEJ,iDAVD;AAYH,6CAlBG,MAkBC;;AAECT,oDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,kCAAT,EAArB;AACA;AACD;AAGZ,qCAhCD,MAgCK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAzCD;AA8CF,6BA/CD,MA+CK;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBA7DD,MA6DK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBApED;AAqEK;AACQ,SA1ER;AA2EF,KA7EF;AA8ED;AACAP,QAAI2D,MAAJ,CAAW,aAAX,EAA0B,UAACzD,GAAD,EAAMC,GAAN,EAAc;AACrC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAED,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAzB,EAA+B;AAAG;AAC/B,mDAASV,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;AACNsC,oDAAQC,GAAR,CAAY3C,KAAKgB,GAAjB;AACA0B,oDAAQC,GAAR,CAAYvB,QAAQL,MAApB;AACK,gDAAGf,KAAKgB,GAAL,CAASiC,MAAT,CAAgB7B,QAAQL,MAAxB,KAAmCV,MAAM6C,QAAN,GAAe,CAArD,EAAuD;;AAEvD9B,wDAAQgC,MAAR,CAAe,UAACrD,GAAD,EAAO;;AAElB,wDAAG,CAACA,GAAJ,EAAQ;;AAEJJ,4DAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,gCAAT,EAArB;AACH,qDAHD,MAGK;;AAEDT,4DAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,uBAAT,EAArB;AACH;AAEJ,iDAVD;AAYH,6CAdG,MAcC;;AAECT,oDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,kCAAT,EAArB;AACA;AACD;AAGZ,qCA5BD,MA4BK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCArCD;AA0CF,6BA3CD,MA2CK;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBAzDD,MAyDK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBAhED;AAiEK;AACQ,SAtER;AAuEF,KAzEH;AA0EE;AACA;AACA;AACAP,QAAIuD,GAAJ,CAAQ,qBAAR,EAA+B,UAACrD,GAAD,EAAMC,GAAN,EAAc;AAC5C;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAEF,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAtB,IAA+BN,KAAKkD,QAAL,GAAc,CAAhD,EAAkD;AAAG;AACjD,mDAAStD,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;;AAGLgB,oDAAQiC,eAAR,GAAwB,CAAxB;AACIjC,oDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAO;;AAEhB,oDAAG,CAACA,GAAJ,EAAQ;AACJ,wDAAIsB,kBAAgB,4BAApB;AACAA,oEAAgBN,MAAhB,GAAuBK,QAAQL,MAA/B;AACAM,oEAAgBjB,OAAhB,GAAwB,mBAAxB;AACAiB,oEAAgBV,WAAhB,GAA4BjB,IAAIa,IAAJ,CAASI,WAArC;AACAU,oEAAgBC,IAAhB,GAAqB,CAArB;AACAD,oEAAgBE,KAAhB,GAAsBH,QAAQJ,GAA9B;AACAK,oEAAgBG,IAAhB,GAAqB,WAArB;AACAH,oEAAgBF,IAAhB;AACA,mEAAKmC,QAAL,CAAelC,QAAQL,MAAvB,EAA+B,UAAChB,GAAD,EAAKwD,SAAL,EAAiB;;AAEI,4DAAG,CAACxD,GAAJ,EAAQ;AAC5D;AAC1C,gEAAI0B,cAAc,qBAAWC,eAAX,CAA2B;AAC3CC,yEAAS,OADkC;AAE3CC,sEAAM;AACN5B,0EAAM,wBADA,EAC0B;AAChC6B,0EAAM,YAFA,CAEa;AAFb;AAFqC,6DAA3B,CAAlB;AAOF,gEAAIC,iBAAiB,aAAGC,YAAH,CAAgB,qBAAhB,EAAuC,OAAvC,CAArB;AACA,gEAAIC,cAAc;AACdC,sEAAM,uBADQ,EACiB;AAC/BC,oEAAIqB,UAAU1D,KAFA,EAEO;AACrBsC,yEAAS,WAHK,EAGQ;AACtBC,sEAAM,cAAIC,MAAJ,CAAWP,cAAX,EAA0B,EAACQ,SAAQ,UAAT,EAAoBC,MAAKgB,UAAUf,KAAnC,EAAyCpC,SAAQ,2BAAjD,EAA6EqC,aAAYrB,QAAQX,WAAjG,EAA1B,EAAwI,UAACV,GAAD,EAAO;AACrJ,wEAAGA,GAAH,EAAO;AACH2C,gFAAQC,GAAR,CAAY5C,GAAZ;AACH;AACA,iEAJK;;AAJQ,6DAAlB;AAWA0B,wEAAYmB,QAAZ,CAAqBZ,WAArB,EAAkC,UAAUjC,GAAV,EAAe8C,IAAf,EAAqB;AACnD,oEAAG9C,GAAH,EACA2C,QAAQC,GAAR,CAAY5C,GAAZ,EADA,KAIA2C,QAAQC,GAAR,CAAYE,IAAZ;AACH,6DAND;AAOA;AACiG;AAAC,qDA/BtD;AAgC5ClD,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,mBAAT,EAArB;AACyC,iDA1CD,MA0CK;;AAEDT,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,sBAAT,EAArB;AACH;AAEJ,6CAjDD;AAoDC;AAGZ,qCA/DD,MA+DK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAxED;AA6EF,6BA9EF,MA8EM;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBA5FD,MA4FK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBAnGD;AAoGK;AACQ,SAzGR;AA0GF,KA5GD;AA6GC;AACAP,QAAIuD,GAAJ,CAAQ,kBAAR,EAA4B,UAACrD,GAAD,EAAMC,GAAN,EAAc;AACtC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAEF,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAtB,IAA+BN,KAAKkD,QAAL,GAAc,CAAhD,EAAkD;AAAG;AACjD,mDAAStD,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;;AAGLgB,oDAAQoC,YAAR,GAAqB,CAArB;AACIpC,oDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAO;;AAEhB,oDAAG,CAACA,GAAJ,EAAQ;;AAEJJ,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,iBAAT,EAArB;AACH,iDAHD,MAGK;;AAEDT,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,sBAAT,EAArB;AACH;AAEJ,6CAVD;AAaC;AAGZ,qCAxBD,MAwBK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAjCD;AAsCF,6BAvCF,MAuCM;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBArDD,MAqDK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBA5DD;AA6DK;AACQ,SAlER;AAmEF,KArEJ;AAsEG;AACHP,QAAIuD,GAAJ,CAAQ,oBAAR,EAA8B,UAACrD,GAAD,EAAMC,GAAN,EAAc;AACxC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAEF,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAtB,IAA+BN,KAAKkD,QAAL,GAAc,CAAhD,EAAkD;AAAG;AACjD,mDAAStD,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;;AAGLgB,oDAAQqC,aAAR,GAAsB,CAAtB;AACIrC,oDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAO;;AAEhB,oDAAG,CAACA,GAAJ,EAAQ;;AAEJJ,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,iBAAT,EAArB;AACH,iDAHD,MAGK;;AAEDT,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,sBAAT,EAArB;AACH;AAEJ,6CAVD;AAaC;AAGZ,qCAxBD,MAwBK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAjCD;AAsCF,6BAvCF,MAuCM;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBArDD,MAqDK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBA5DD;AA6DK;AACQ,SAlER;AAmEF,KArEJ;AAsEI;AACLP,QAAIuD,GAAJ,CAAQ,oBAAR,EAA8B,UAACrD,GAAD,EAAMC,GAAN,EAAc;AAC3C;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAEF,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAtB,IAA+BN,KAAKkD,QAAL,GAAc,CAAhD,EAAkD;AAAG;AACjD,mDAAStD,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;;AAGLgB,oDAAQiC,eAAR,GAAwB,CAAxB;AACIjC,oDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAO;;AAEhB,oDAAG,CAACA,GAAJ,EAAQ;AACA,wDAAIsB,kBAAgB,4BAApB;AACAA,oEAAgBN,MAAhB,GAAuBK,QAAQL,MAA/B;AACAM,oEAAgBjB,OAAhB,GAAwB,mBAAxB;AACAiB,oEAAgBV,WAAhB,GAA4BjB,IAAIa,IAAJ,CAASI,WAArC;AACAU,oEAAgBC,IAAhB,GAAqB,CAArB;AACAD,oEAAgBE,KAAhB,GAAsBH,QAAQJ,GAA9B;AACAK,oEAAgBG,IAAhB,GAAqB,WAArB;AACA,mEAAK8B,QAAL,CAAelC,QAAQL,MAAvB,EAA+B,UAAChB,GAAD,EAAKwD,SAAL,EAAiB;;AAEI,4DAAG,CAACxD,GAAJ,EAAQ;AAC5D;AAC1C,gEAAI0B,cAAc,qBAAWC,eAAX,CAA2B;AAC3CC,yEAAS,OADkC;AAE3CC,sEAAM;AACN5B,0EAAM,wBADA,EAC0B;AAChC6B,0EAAM,YAFA,CAEa;AAFb;AAFqC,6DAA3B,CAAlB;AAOF,gEAAIC,iBAAiB,aAAGC,YAAH,CAAgB,oBAAhB,EAAsC,OAAtC,CAArB;AACA,gEAAIC,cAAc;AACdC,sEAAM,uBADQ,EACiB;AAC/BC,oEAAIqB,UAAU1D,KAFA,EAEO;AACrBsC,yEAAS,WAHK,EAGQ;AACtBC,sEAAM,cAAIC,MAAJ,CAAWP,cAAX,EAA0B,EAACQ,SAAQ,UAAT,EAAoBC,MAAKgB,UAAUf,KAAnC,EAAyCpC,SAAQ,2BAAjD,EAA6EqC,aAAYrB,QAAQX,WAAjG,EAA6GiD,QAAOhE,IAAIa,IAAJ,CAASI,WAA7H,EAA1B,EAAoK,UAACZ,GAAD,EAAO;AACjL,wEAAGA,GAAH,EAAO;AACH2C,gFAAQC,GAAR,CAAY5C,GAAZ;AACH;AACA,iEAJK;;AAJQ,6DAAlB;AAWA0B,wEAAYmB,QAAZ,CAAqBZ,WAArB,EAAkC,UAAUjC,GAAV,EAAe8C,IAAf,EAAqB;AACnD,oEAAG9C,GAAH,EACA2C,QAAQC,GAAR,CAAY5C,GAAZ,EADA,KAIA2C,QAAQC,GAAR,CAAYE,IAAZ;AACH,6DAND;AAOA;AACiG;AAAC,qDA/BtD;AAgCAxB,oEAAgBF,IAAhB;AACJxB,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,mBAAT,EAArB;AACH,iDA1CD,MA0CK;;AAEDT,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,sBAAT,EAArB;AACH;AAEJ,6CAjDD;AAoDC;AAGZ,qCA/DD,MA+DK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAxED;AA6EF,6BA9EF,MA8EM;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBA5FD,MA4FK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBAnGD;AAoGK;AACQ,SAzGR;AA0GF,KA5GD;AA6GC;AACAP,QAAIuD,GAAJ,CAAQ,iBAAR,EAA2B,UAACrD,GAAD,EAAMC,GAAN,EAAc;AACrC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAEF,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAtB,IAA+BN,KAAKkD,QAAL,GAAc,CAAhD,EAAkD;AAAG;AACjD,mDAAStD,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;;AAGLgB,oDAAQoC,YAAR,GAAqB,CAArB;AACIpC,oDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAO;;AAEhB,oDAAG,CAACA,GAAJ,EAAQ;AACJ,wDAAIsB,kBAAgB,4BAApB;AACAA,oEAAgBN,MAAhB,GAAuBK,QAAQL,MAA/B;AACAM,oEAAgBjB,OAAhB,GAAwB,gBAAxB;AACAiB,oEAAgBV,WAAhB,GAA4BjB,IAAIa,IAAJ,CAASI,WAArC;AACAU,oEAAgBC,IAAhB,GAAqB,CAArB;AACAD,oEAAgBE,KAAhB,GAAsBH,QAAQJ,GAA9B;AACAK,oEAAgBG,IAAhB,GAAqB,WAArB;AACA,mEAAK8B,QAAL,CAAelC,QAAQL,MAAvB,EAA+B,UAAChB,GAAD,EAAKwD,SAAL,EAAiB;;AAEI,4DAAG,CAACxD,GAAJ,EAAQ;AAC5D;AAC1C,gEAAI0B,cAAc,qBAAWC,eAAX,CAA2B;AAC3CC,yEAAS,OADkC;AAE3CC,sEAAM;AACN5B,0EAAM,wBADA,EAC0B;AAChC6B,0EAAM,YAFA,CAEa;AAFb;AAFqC,6DAA3B,CAAlB;AAOF,gEAAIC,iBAAiB,aAAGC,YAAH,CAAgB,oBAAhB,EAAsC,OAAtC,CAArB;AACA,gEAAIC,cAAc;AACdC,sEAAM,uBADQ,EACiB;AAC/BC,oEAAIqB,UAAU1D,KAFA,EAEO;AACrBsC,yEAAS,WAHK,EAGQ;AACtBC,sEAAM,cAAIC,MAAJ,CAAWP,cAAX,EAA0B,EAACQ,SAAQ,UAAT,EAAoBC,MAAKgB,UAAUf,KAAnC,EAAyCpC,SAAQ,wBAAjD,EAA0EqC,aAAYrB,QAAQX,WAA9F,EAA0GiD,QAAOhE,IAAIa,IAAJ,CAASI,WAA1H,EAA1B,EAAiK,UAACZ,GAAD,EAAO;AAC9K,wEAAGA,GAAH,EAAO;AACH2C,gFAAQC,GAAR,CAAY5C,GAAZ;AACH;AACA,iEAJK;;AAJQ,6DAAlB;AAWA0B,wEAAYmB,QAAZ,CAAqBZ,WAArB,EAAkC,UAAUjC,GAAV,EAAe8C,IAAf,EAAqB;AACnD,oEAAG9C,GAAH,EACA2C,QAAQC,GAAR,CAAY5C,GAAZ,EADA,KAIA2C,QAAQC,GAAR,CAAYE,IAAZ;AACH,6DAND;AAOA;AACiG;AAAC,qDA/BtD;AAgCAxB,oEAAgBF,IAAhB;AACAxB,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,iBAAT,EAArB;AACH,iDA1CD,MA0CK;;AAEDT,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,sBAAT,EAArB;AACH;AAEJ,6CAjDD;AAoDC;AAGZ,qCA/DD,MA+DK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAxED;AA6EF,6BA9EF,MA8EM;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBA5FD,MA4FK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBAnGD;AAoGK;AACQ,SAzGR;AA0GF,KA5GJ;AA6GG;AACHP,QAAIuD,GAAJ,CAAQ,mBAAR,EAA6B,UAACrD,GAAD,EAAMC,GAAN,EAAc;AACvC;AACE,uBAAKC,OAAL,CAAa,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAb,EAAoC,UAACE,GAAD,EAAKC,IAAL,EAAY;AAC9C,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;AACT,gCAAMR,OAAN,CAAc,EAACC,OAAMH,IAAIa,IAAJ,CAASV,KAAhB,EAAd,EAAqC,UAACE,GAAD,EAAKM,KAAL,EAAa;;AAE9C,wBAAG,CAACN,GAAJ,EAAQ;;AAEJ,4BAAGM,SAAOJ,SAAV,EAAoB;AAAE;;AAElBN,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB;AACH,yBAHD,MAGK;;AAEF,gCAAGC,MAAMC,KAAN,IAAaZ,IAAIa,IAAJ,CAASD,KAAtB,IAA+BN,KAAKkD,QAAL,GAAc,CAAhD,EAAkD;AAAG;AACjD,mDAAStD,OAAT,CAAiB,EAACoB,KAAItB,IAAII,MAAJ,CAAWkD,EAAhB,EAAjB,EAAqC,UAACjD,GAAD,EAAKqB,OAAL,EAAe;;AAG5C,wCAAG,CAACrB,GAAJ,EAAQ;AACA,4CAAGqB,YAAUnB,SAAb,EAAuB;;AAEnBN,gDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,wBAAT,EAArB;AACH,yCAHD,MAGK;;AAGLgB,oDAAQqC,aAAR,GAAsB,CAAtB;AACIrC,oDAAQD,IAAR,CAAa,UAACpB,GAAD,EAAO;;AAEhB,oDAAG,CAACA,GAAJ,EAAQ;AACJ,wDAAIsB,kBAAgB,4BAApB;AACAA,oEAAgBN,MAAhB,GAAuBK,QAAQL,MAA/B;AACAM,oEAAgBjB,OAAhB,GAAwB,kBAAxB;AACAiB,oEAAgBV,WAAhB,GAA4BjB,IAAIa,IAAJ,CAASI,WAArC;AACAU,oEAAgBC,IAAhB,GAAqB,CAArB;AACAD,oEAAgBE,KAAhB,GAAsBH,QAAQJ,GAA9B;AACAK,oEAAgBG,IAAhB,GAAqB,WAArB;AACA,mEAAK8B,QAAL,CAAelC,QAAQL,MAAvB,EAA+B,UAAChB,GAAD,EAAKwD,SAAL,EAAiB;;AAEI,4DAAG,CAACxD,GAAJ,EAAQ;AAC5D;AAC1C,gEAAI0B,cAAc,qBAAWC,eAAX,CAA2B;AAC3CC,yEAAS,OADkC;AAE3CC,sEAAM;AACN5B,0EAAM,wBADA,EAC0B;AAChC6B,0EAAM,YAFA,CAEa;AAFb;AAFqC,6DAA3B,CAAlB;AAOF,gEAAIC,iBAAiB,aAAGC,YAAH,CAAgB,oBAAhB,EAAsC,OAAtC,CAArB;AACA,gEAAIC,cAAc;AACdC,sEAAM,uBADQ,EACiB;AAC/BC,oEAAIqB,UAAU1D,KAFA,EAEO;AACrBsC,yEAAS,WAHK,EAGQ;AACtBC,sEAAM,cAAIC,MAAJ,CAAWP,cAAX,EAA0B,EAACQ,SAAQ,UAAT,EAAoBC,MAAKgB,UAAUf,KAAnC,EAAyCpC,SAAQ,mCAAjD,EAAqFqC,aAAYrB,QAAQX,WAAzG,EAAqHiD,QAAOhE,IAAIa,IAAJ,CAASI,WAArI,EAA1B,EAA4K,UAACZ,GAAD,EAAO;AACzL,wEAAGA,GAAH,EAAO;AACH2C,gFAAQC,GAAR,CAAY5C,GAAZ;AACH;AACA,iEAJK;;AAJQ,6DAAlB;AAWA0B,wEAAYmB,QAAZ,CAAqBZ,WAArB,EAAkC,UAAUjC,GAAV,EAAe8C,IAAf,EAAqB;AACnD,oEAAG9C,GAAH,EACA2C,QAAQC,GAAR,CAAY5C,GAAZ,EADA,KAIA2C,QAAQC,GAAR,CAAYE,IAAZ;AACH,6DAND;AAOA;AACiG;AAAC,qDA/BtD;AAgCAxB,oEAAgBF,IAAhB;AACAxB,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,eAAT,EAArB;AACH,iDA1CD,MA0CK;;AAEDT,wDAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB,EAAC1C,SAAQ,sBAAT,EAArB;AACH;AAEJ,6CAjDD;AAoDC;AAGZ,qCA/DD,MA+DK;;AAEDT,4CAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAGR,iCAxED;AA6EF,6BA9EF,MA8EM;AACDJ,oCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AAEH;AAEJ;AAEJ,qBA5FD,MA4FK;;AAEGT,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACH;AAER,iBAnGD;AAoGK;AACQ,SAzGR;AA0GF,KA5GJ;AA6GG;AACHP,QAAImE,GAAJ,CAAQ,sCAAR,EAAgD,UAACjE,GAAD,EAAMC,GAAN,EAAc;AAC1D;AACE,wBAAMC,OAAN,CAAc,EAACU,OAAMZ,IAAII,MAAJ,CAAWQ,KAAlB,EAAd,EAAuC,UAACP,GAAD,EAAKC,IAAL,EAAY;AACjD,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;;AAGE,oBAAIwD,OAAK,CAAC,MAAD,EAAQ,QAAR,CAAT;AACA,oBAAIC,SAAO,MAAX;AACA,oBAAGD,KAAKE,OAAL,CAAapE,IAAII,MAAJ,CAAW+D,MAAxB,IAAkC,CAAC,CAAtC,EAAwC;;AAEpCA,6BAAOnE,IAAII,MAAJ,CAAW+D,MAAlB;AACH;AACD;AACA,oBAAIE,aAAW,CAAf;;AAEA,oBAAG,CAACC,MAAMtE,IAAII,MAAJ,CAAWmE,IAAjB,CAAJ,EAA2B;AACxBF,iCAAWrE,IAAII,MAAJ,CAAWmE,IAAtB;AACD;AACD;;AAEA,oBAAIC,MAAIC,KAAKC,KAAL,CAAWC,mBAAmB3E,IAAII,MAAJ,CAAWwE,KAA9B,CAAX,CAAR;;AAEA,oBAAIC,aAAa,SAAbA,UAAa,CAASC,QAAT,EAAkB;AAChCC,4BAAQC,IAAR,CAAaR,GAAb,EAAkB,UAASnE,GAAT,EAAc4E,GAAd,EAAkB;AAC9B,4BAAG5E,GAAH,EAAO;AAAEyE,qCAASzE,GAAT,EAAc,IAAd;AAAqB,yBAA9B,MACI;AACAyE,qCAAS,IAAT,EAAeG,IAAIC,MAAnB;AACF;AACP,qBALD;AAME,iBAPL;;AASF,oBAAIC,gBAAgB,SAAhBA,aAAgB,CAASL,QAAT,EAAkB;;AAElCC,4BAAQC,IAAR,CAAaR,GAAb,EAAkBY,IAAlB,CAAuB,CAACf,aAAW,CAAZ,IAAe,EAAtC,EAA0CH,IAA1C,CAA+C,EAACC,QAAQ,CAAC,CAAV,EAA/C,EAA6DkB,KAA7D,CAAmE,EAAnE,EAAuEC,IAAvE,CAA4E,UAASjF,GAAT,EAAc4E,GAAd,EAAkB;AAC7F,4BAAG5E,GAAH,EAAO;AAAEyE,qCAASzE,GAAT,EAAc,IAAd;AAAqB,yBAA9B,MACI;AACAyE,qCAAS,IAAT,EAAeG,GAAf;AACF;AACP,qBALI;AAOJ,iBATA;;AAYA,gCAAMM,QAAN,CAAe,CAACV,UAAD,EAAaM,aAAb,CAAf,EAA4C,UAAS9E,GAAT,EAAcmF,OAAd,EAAsB;AAC9D,wBAAGnF,GAAH,EAAO;AACP;AACCJ,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACA,qBAHD,MAGK;AACJJ,4BAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACgF,aAAYC,KAAKC,KAAL,CAAWH,QAAQ,CAAR,IAAW,EAAX,GAAc,CAAzB,CAAb,EAA2CjB,MAAMF,UAAjD,EAA6DuB,UAAUJ,QAAQ,CAAR,CAAvE,EAArB;AACA;AACJ,iBAPD;AASL;AACQ,SArDR;AAsDF,KAxDJ;AAyDK;AACL1F,QAAImE,GAAJ,CAAQ,8BAAR,EAAwC,UAACjE,GAAD,EAAMC,GAAN,EAAc;AAClD;AACE,wBAAMC,OAAN,CAAc,EAACU,OAAMZ,IAAII,MAAJ,CAAWQ,KAAlB,EAAd,EAAuC,UAACP,GAAD,EAAKC,IAAL,EAAY;AACjD,gBAAGA,QAAMC,SAAT,EAAmB;AAClBN,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACH,aAFE,MAEE;;AAEE;AACA,oBAAI2D,aAAW,CAAf;;AAEA,oBAAG,CAACC,MAAMtE,IAAII,MAAJ,CAAWmE,IAAjB,CAAJ,EAA2B;AACxBF,iCAAWrE,IAAII,MAAJ,CAAWmE,IAAtB;AACD;AACD;AACA,oBAAIM,aAAa,SAAbA,UAAa,CAASC,QAAT,EAAkB;AAChC,uCAASE,IAAT,CAAc,EAACjE,aAAa,IAAI8E,MAAJ,CAAW7F,IAAII,MAAJ,CAAW0F,MAAtB,EAA6B,GAA7B,CAAd,EAAd,EAAgE,UAASzF,GAAT,EAAc4E,GAAd,EAAkB;AAC5E,4BAAG5E,GAAH,EAAO;AAAEyE,qCAASzE,GAAT,EAAc,IAAd;AAAqB,yBAA9B,MACI;AACAyE,qCAAS,IAAT,EAAeG,IAAIC,MAAnB;AACF;AACP,qBALD;AAME,iBAPL;;AASF,oBAAIC,gBAAgB,SAAhBA,aAAgB,CAASL,QAAT,EAAkB;AACrC,uCAASE,IAAT,CAAc,EAACjE,aAAa,IAAI8E,MAAJ,CAAW7F,IAAII,MAAJ,CAAW0F,MAAtB,EAA6B,GAA7B,CAAd,EAAd,EAAgEV,IAAhE,CAAqE,CAACf,aAAW,CAAZ,IAAe,EAApF,EAAwFgB,KAAxF,CAA8F,EAA9F,EAAkGC,IAAlG,CAAuG,UAASjF,GAAT,EAAc4E,GAAd,EAAkB;AACrH,4BAAG5E,GAAH,EAAO;AAAEyE,qCAASzE,GAAT,EAAc,IAAd;AAAqB,yBAA9B,MACI;AACAyE,qCAAS,IAAT,EAAeG,GAAf;AACF;AACP,qBALC;AAOD,iBARA;;AAUA,gCAAMM,QAAN,CAAe,CAACV,UAAD,EAAaM,aAAb,CAAf,EAA4C,UAAS9E,GAAT,EAAcmF,OAAd,EAAsB;AAC9D,wBAAGnF,GAAH,EAAO;AACP;AACCJ,4BAAIO,MAAJ,CAAW,GAAX,EAAgB4C,IAAhB,CAAqB/C,GAArB;AACA,qBAHD,MAGK;AACJJ,4BAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACgF,aAAYC,KAAKC,KAAL,CAAWH,QAAQ,CAAR,IAAW,EAAX,GAAc,CAAzB,CAAb,EAA2CjB,MAAMF,UAAjD,EAA6DuB,UAAUJ,QAAQ,CAAR,CAAvE,EAArB;AACA;AACJ,iBAPD;AASL;AACQ,SAzCR;AA0CF,KA5CJ;AA6CF,WAAO1F,GAAP;AACD,C","file":"requests.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Login from '../model/login';\r\nimport Requests from '../model/requests';\r\nimport User from '../model/user';\r\nimport bodyParser from 'body-parser';\r\nimport nodemailer from 'nodemailer';\r\nimport fs from 'fs';\r\nimport ejs from 'ejs';\r\nimport async from 'async';\r\nimport Notification from '../model/notification';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n\r\n  // '/v1/requests/add/emailID'\r\n  api.post('/add/:email', (req, res) => {\r\n   //check token\r\n     User.findOne({email:req.params.email},(err,user)=>{\r\n       if(user==undefined){\r\n        res.status(400).json({ message: 'User not found!' });\r\n    }else{\r\nLogin.findOne({email:req.params.email},(err,login)=>{\r\n\r\n    if(!err){\r\n\r\n        if(login==undefined){ //user not found\r\n\r\n            res.status(400).json({ message: 'User not Logged In!' });\r\n        }else{\r\n\r\n            if(login.token==req.body.token){  //password matching\r\n               \r\n                    let newRequest=new Requests();\r\n                    newRequest.requestName=req.body.requestName;\r\n                   // newRequest.image=req.body.name; saved for later\r\n                    newRequest.numberOfDays=req.body.numberOfDays;\r\n                    newRequest.description=req.body.description;\r\n                    newRequest.referenceLink=req.body.referenceLink;\r\n                    newRequest.college=user.college;\r\n                    newRequest.city=user.city;\r\n                    newRequest.userId=user._id\r\n                    newRequest.lastEdit=Date();\r\n                    newRequest.save((err,request)=>{\r\n\r\n                        if(!err){\r\n                            let newNotification=new Notification();\r\n                            newNotification.userId=user._id;\r\n                            newNotification.message=\"Status Pending!\"\r\n                            newNotification.description=\"You Request \"+request.requestName+\" is peding on approval by moderators will get back to you soon!\";\r\n                            newNotification.type=4;\r\n                            newNotification.refId=request._id;\r\n                            newNotification.link=\"/requests\";\r\n                             //sending mail \r\n                             var transporter = nodemailer.createTransport({\r\n                                service: 'Gmail',\r\n                                auth: {\r\n                                user: 'toshikverma1@gmail.com', // Your email id\r\n                                pass: '123123123a' // Your password\r\n                                }\r\n                            });\r\n                            var templateString = fs.readFileSync('views/approvals.ejs', 'utf-8');\r\n                            var mailOptions = {\r\n                                from: 'toshikverma@gmail.com', // sender address\r\n                                to: user.email, // list of receivers\r\n                                subject: 'Request Saved', // Subject line\r\n                                html: ejs.render(templateString,{heading:\"Pending approval\",name:user.fname,message:\"Your Request is upload and pending approval!\",productName:req.body.requestName},(err)=>{\r\n                                if(err){\r\n                                    console.log(err);\r\n                                }\r\n                                }) \r\n                                \r\n                            };\r\n                            transporter.sendMail(mailOptions, function (err, info) {\r\n                                if(err)\r\n                                console.log(err)\r\n                                \r\n                                else\r\n                                console.log(info);\r\n                            });\r\n                            //sending mail ends\r\n                            newNotification.save();\r\n                                res.status(200).json(request);\r\n\r\n                        }else{\r\n\r\n                                res.status(400).json({message:\"request not saved!\"});\r\n                        }\r\n                    });\r\n                   \r\n\r\n\r\n            }else{\r\n                res.status(400).json({ message: 'invalid token!' });\r\n\r\n            }\r\n      \r\n        }\r\n       \r\n    }else{\r\n\r\n            res.status(400).send(err);\r\n        }\r\n  \r\n});\r\n    }\r\n            });\r\n  });\r\n\r\n  //updating a request\r\n\r\n  api.put('/update/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token){  //password matching\r\n                Requests.findOne({_id:req.params.id},(err,request)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(request===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such request exsist\"});\r\n                                }else{\r\n                               console.log(user._id);\r\n                               console.log(request.userId);\r\n                                    if(user._id.equals(request.userId) || login.userType>0){\r\n                                    request.requestName=req.body.requestName;\r\n                                    request.numberOfDays=req.body.numberOfDays;\r\n                                    request.description=req.body.description;\r\n                                    request.referenceLink=req.body.referenceLink;\r\n                                    request.lastEdit=Date();\r\n                                    request.save((err,request)=>{\r\n\r\n                                        if(!err){\r\n\r\n                                            res.status(200).send(request);\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"request was not saved\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                                }else{\r\n                                    \r\n                                      res.status(400).send({message:\"not authorized to update request\"});\r\n                                     }\r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n //deleting a request\r\n api.delete('/delete/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token){  //password matching\r\n                Requests.findOne({_id:req.params.id},(err,request)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(request===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such request exsist\"});\r\n                                }else{\r\n                               console.log(user._id);\r\n                               console.log(request.userId);\r\n                                    if(user._id.equals(request.userId) || login.userType>0){\r\n                                \r\n                                    request.remove((err)=>{\r\n\r\n                                        if(!err){\r\n\r\n                                            res.status(200).send({message:\"request deleted successsfully!\"});\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"request was not saved\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                                }else{\r\n                                    \r\n                                      res.status(400).send({message:\"not authorized to delete request\"});\r\n                                     }\r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n   //------------------------------------------------------------------------\r\n   //aaproval starts here!\r\n   //approving request\r\n   api.put('/approverequest/:id', (req, res) => {\r\n    //check token\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n            if(login.token==req.body.token && user.userType>0){  //token matching\r\n                Requests.findOne({_id:req.params.id},(err,request)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(request===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such request exsist\"});\r\n                                }else{\r\n                            \r\n                                  \r\n                                request.requestApproved=1;\r\n                                    request.save((err)=>{\r\n\r\n                                        if(!err){\r\n                                            let newNotification=new Notification();\r\n                                            newNotification.userId=request.userId;\r\n                                            newNotification.message=\"Request Approved!\"\r\n                                            newNotification.description=req.body.description;\r\n                                            newNotification.type=1;\r\n                                            newNotification.refId=request._id;\r\n                                            newNotification.link=\"/requests\";\r\n                                            newNotification.save();\r\n                                            User.findById((request.userId),(err,ownerUser)=>{\r\n                                                \r\n                                                                                                if(!err){\r\n                                            //sending mail \r\n  var transporter = nodemailer.createTransport({\r\n    service: 'Gmail',\r\n    auth: {\r\n    user: 'toshikverma1@gmail.com', // Your email id\r\n    pass: '123123123a' // Your password\r\n    }\r\n});\r\nvar templateString = fs.readFileSync('views/approvals.ejs', 'utf-8');\r\nvar mailOptions = {\r\n    from: 'toshikverma@gmail.com', // sender address\r\n    to: ownerUser.email, // list of receivers\r\n    subject: 'Approvals', // Subject line\r\n    html: ejs.render(templateString,{heading:\"Accepted\",name:ownerUser.fname,message:\"Your Request is Approved!\",productName:request.requestName},(err)=>{\r\n    if(err){\r\n        console.log(err);\r\n    }\r\n    }) \r\n    \r\n};\r\ntransporter.sendMail(mailOptions, function (err, info) {\r\n    if(err)\r\n    console.log(err)\r\n    \r\n    else\r\n    console.log(info);\r\n});\r\n//sending mail ends\r\n                                                                                                }});                             \r\nres.status(200).send({message:\"request approved!\"});\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"some problem occured\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                              \r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n    //approving link\r\n    api.put('/approvelink/:id', (req, res) => {\r\n        //check token\r\n          User.findOne({email:req.body.email},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not found!' });\r\n         }else{\r\n     Login.findOne({email:req.body.email},(err,login)=>{\r\n     \r\n         if(!err){\r\n     \r\n             if(login==undefined){ //user not found\r\n     \r\n                 res.status(400).json({ message: 'User not Logged In!' });\r\n             }else{\r\n     \r\n                if(login.token==req.body.token && user.userType>0){  //token matching\r\n                    Requests.findOne({_id:req.params.id},(err,request)=>{\r\n    \r\n                       \r\n                            if(!err){\r\n                                    if(request===undefined){\r\n    \r\n                                        res.status(400).send({message:\"no such request exsist\"});\r\n                                    }else{\r\n                                \r\n                                      \r\n                                    request.linkApproved=1;\r\n                                        request.save((err)=>{\r\n    \r\n                                            if(!err){\r\n    \r\n                                                res.status(200).send({message:\"link  approved!\"});\r\n                                            }else{\r\n    \r\n                                                res.status(400).send({message:\"some problem occured\"});\r\n                                            }\r\n                                        \r\n                                        });\r\n    \r\n                                  \r\n                                        }\r\n    \r\n    \r\n                            }else{\r\n    \r\n                                res.status(400).send(err);\r\n                            }\r\n    \r\n                        \r\n                    });\r\n                        \r\n                        \r\n     \r\n     \r\n                 }else{\r\n                     res.status(400).json({ message: 'invalid token!' });\r\n     \r\n                 }\r\n           \r\n             }\r\n            \r\n         }else{\r\n     \r\n                 res.status(400).send(err);\r\n             }\r\n       \r\n     });\r\n         }\r\n                 });\r\n       });\r\n       //approving  iamges\r\n    api.put('/approveimages/:id', (req, res) => {\r\n        //check token\r\n          User.findOne({email:req.body.email},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not found!' });\r\n         }else{\r\n     Login.findOne({email:req.body.email},(err,login)=>{\r\n     \r\n         if(!err){\r\n     \r\n             if(login==undefined){ //user not found\r\n     \r\n                 res.status(400).json({ message: 'User not Logged In!' });\r\n             }else{\r\n     \r\n                if(login.token==req.body.token && user.userType>0){  //token matching\r\n                    Requests.findOne({_id:req.params.id},(err,request)=>{\r\n    \r\n                       \r\n                            if(!err){\r\n                                    if(request===undefined){\r\n    \r\n                                        res.status(400).send({message:\"no such request exsist\"});\r\n                                    }else{\r\n                                \r\n                                      \r\n                                    request.imageApproved=1;\r\n                                        request.save((err)=>{\r\n    \r\n                                            if(!err){\r\n    \r\n                                                res.status(200).send({message:\"image approved!\"});\r\n                                            }else{\r\n    \r\n                                                res.status(400).send({message:\"some problem occured\"});\r\n                                            }\r\n                                        \r\n                                        });\r\n    \r\n                                  \r\n                                        }\r\n    \r\n    \r\n                            }else{\r\n    \r\n                                res.status(400).send(err);\r\n                            }\r\n    \r\n                        \r\n                    });\r\n                        \r\n                        \r\n     \r\n     \r\n                 }else{\r\n                     res.status(400).json({ message: 'invalid token!' });\r\n     \r\n                 }\r\n           \r\n             }\r\n            \r\n         }else{\r\n     \r\n                 res.status(400).send(err);\r\n             }\r\n       \r\n     });\r\n         }\r\n                 });\r\n       });\r\n        //rejecting request\r\n   api.put('/rejectrequest/:id', (req, res) => {\r\n    //check token\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n            if(login.token==req.body.token && user.userType>0){  //token matching\r\n                Requests.findOne({_id:req.params.id},(err,request)=>{\r\n\r\n                   \r\n                        if(!err){\r\n                                if(request===undefined){\r\n\r\n                                    res.status(400).send({message:\"no such request exsist\"});\r\n                                }else{\r\n                            \r\n                                  \r\n                                request.requestApproved=2;\r\n                                    request.save((err)=>{\r\n\r\n                                        if(!err){\r\n                                                let newNotification=new Notification();\r\n                                                newNotification.userId=request.userId;\r\n                                                newNotification.message=\"request Rejected!\"\r\n                                                newNotification.description=req.body.description;\r\n                                                newNotification.type=1;\r\n                                                newNotification.refId=request._id;\r\n                                                newNotification.link=\"/requests\";\r\n                                                User.findById((request.userId),(err,ownerUser)=>{\r\n                                                    \r\n                                                                                                    if(!err){\r\n                                                //sending mail \r\n      var transporter = nodemailer.createTransport({\r\n        service: 'Gmail',\r\n        auth: {\r\n        user: 'toshikverma1@gmail.com', // Your email id\r\n        pass: '123123123a' // Your password\r\n        }\r\n    });\r\n    var templateString = fs.readFileSync('views/rejected.ejs', 'utf-8');\r\n    var mailOptions = {\r\n        from: 'toshikverma@gmail.com', // sender address\r\n        to: ownerUser.email, // list of receivers\r\n        subject: 'Approvals', // Subject line\r\n        html: ejs.render(templateString,{heading:\"Rejected\",name:ownerUser.fname,message:\"Your Request is Rejected!\",productName:request.requestName,reason:req.body.description},(err)=>{\r\n        if(err){\r\n            console.log(err);\r\n        }\r\n        }) \r\n        \r\n    };\r\n    transporter.sendMail(mailOptions, function (err, info) {\r\n        if(err)\r\n        console.log(err)\r\n        \r\n        else\r\n        console.log(info);\r\n    });\r\n    //sending mail ends\r\n                                                                                                    }});          \r\n                                                newNotification.save();\r\n                                            res.status(200).send({message:\"Request rejected!\"});\r\n                                        }else{\r\n\r\n                                            res.status(400).send({message:\"some problem occured\"});\r\n                                        }\r\n                                    \r\n                                    });\r\n\r\n                              \r\n                                    }\r\n\r\n\r\n                        }else{\r\n\r\n                            res.status(400).send(err);\r\n                        }\r\n\r\n                    \r\n                });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n    //approving link\r\n    api.put('/rejectlink/:id', (req, res) => {\r\n        //check token\r\n          User.findOne({email:req.body.email},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not found!' });\r\n         }else{\r\n     Login.findOne({email:req.body.email},(err,login)=>{\r\n     \r\n         if(!err){\r\n     \r\n             if(login==undefined){ //user not found\r\n     \r\n                 res.status(400).json({ message: 'User not Logged In!' });\r\n             }else{\r\n     \r\n                if(login.token==req.body.token && user.userType>0){  //token matching\r\n                    Requests.findOne({_id:req.params.id},(err,request)=>{\r\n    \r\n                       \r\n                            if(!err){\r\n                                    if(request===undefined){\r\n    \r\n                                        res.status(400).send({message:\"no such request exsist\"});\r\n                                    }else{\r\n                                \r\n                                      \r\n                                    request.linkApproved=2;\r\n                                        request.save((err)=>{\r\n    \r\n                                            if(!err){\r\n                                                let newNotification=new Notification();\r\n                                                newNotification.userId=request.userId;\r\n                                                newNotification.message=\"Link Rejected!\"\r\n                                                newNotification.description=req.body.description;\r\n                                                newNotification.type=1;\r\n                                                newNotification.refId=request._id;\r\n                                                newNotification.link=\"/requests\";\r\n                                                User.findById((request.userId),(err,ownerUser)=>{\r\n                                                    \r\n                                                                                                    if(!err){\r\n                                                //sending mail \r\n      var transporter = nodemailer.createTransport({\r\n        service: 'Gmail',\r\n        auth: {\r\n        user: 'toshikverma1@gmail.com', // Your email id\r\n        pass: '123123123a' // Your password\r\n        }\r\n    });\r\n    var templateString = fs.readFileSync('views/rejected.ejs', 'utf-8');\r\n    var mailOptions = {\r\n        from: 'toshikverma@gmail.com', // sender address\r\n        to: ownerUser.email, // list of receivers\r\n        subject: 'Approvals', // Subject line\r\n        html: ejs.render(templateString,{heading:\"Rejected\",name:ownerUser.fname,message:\"Your Link is rejected!\",productName:request.requestName,reason:req.body.description},(err)=>{\r\n        if(err){\r\n            console.log(err);\r\n        }\r\n        }) \r\n        \r\n    };\r\n    transporter.sendMail(mailOptions, function (err, info) {\r\n        if(err)\r\n        console.log(err)\r\n        \r\n        else\r\n        console.log(info);\r\n    });\r\n    //sending mail ends\r\n                                                                                                    }});        \r\n                                                newNotification.save();\r\n                                                res.status(200).send({message:\"Link  rejected!\"});\r\n                                            }else{\r\n    \r\n                                                res.status(400).send({message:\"some problem occured\"});\r\n                                            }\r\n                                        \r\n                                        });\r\n    \r\n                                  \r\n                                        }\r\n    \r\n    \r\n                            }else{\r\n    \r\n                                res.status(400).send(err);\r\n                            }\r\n    \r\n                        \r\n                    });\r\n                        \r\n                        \r\n     \r\n     \r\n                 }else{\r\n                     res.status(400).json({ message: 'invalid token!' });\r\n     \r\n                 }\r\n           \r\n             }\r\n            \r\n         }else{\r\n     \r\n                 res.status(400).send(err);\r\n             }\r\n       \r\n     });\r\n         }\r\n                 });\r\n       });\r\n       //approving  iamges\r\n    api.put('/rejectimages/:id', (req, res) => {\r\n        //check token\r\n          User.findOne({email:req.body.email},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not found!' });\r\n         }else{\r\n     Login.findOne({email:req.body.email},(err,login)=>{\r\n     \r\n         if(!err){\r\n     \r\n             if(login==undefined){ //user not found\r\n     \r\n                 res.status(400).json({ message: 'User not Logged In!' });\r\n             }else{\r\n     \r\n                if(login.token==req.body.token && user.userType>0){  //token matching\r\n                    Requests.findOne({_id:req.params.id},(err,request)=>{\r\n    \r\n                       \r\n                            if(!err){\r\n                                    if(request===undefined){\r\n    \r\n                                        res.status(400).send({message:\"no such request exsist\"});\r\n                                    }else{\r\n                                \r\n                                      \r\n                                    request.imageApproved=2;\r\n                                        request.save((err)=>{\r\n    \r\n                                            if(!err){\r\n                                                let newNotification=new Notification();\r\n                                                newNotification.userId=request.userId;\r\n                                                newNotification.message=\"Images Rejected!\"\r\n                                                newNotification.description=req.body.description;\r\n                                                newNotification.type=1;\r\n                                                newNotification.refId=request._id;\r\n                                                newNotification.link=\"/requests\";\r\n                                                User.findById((request.userId),(err,ownerUser)=>{\r\n                                                    \r\n                                                                                                    if(!err){\r\n                                                //sending mail \r\n      var transporter = nodemailer.createTransport({\r\n        service: 'Gmail',\r\n        auth: {\r\n        user: 'toshikverma1@gmail.com', // Your email id\r\n        pass: '123123123a' // Your password\r\n        }\r\n    });\r\n    var templateString = fs.readFileSync('views/rejected.ejs', 'utf-8');\r\n    var mailOptions = {\r\n        from: 'toshikverma@gmail.com', // sender address\r\n        to: ownerUser.email, // list of receivers\r\n        subject: 'Approvals', // Subject line\r\n        html: ejs.render(templateString,{heading:\"Rejected\",name:ownerUser.fname,message:\"Your image/images is/are Rejected\",productName:request.requestName,reason:req.body.description},(err)=>{\r\n        if(err){\r\n            console.log(err);\r\n        }\r\n        }) \r\n        \r\n    };\r\n    transporter.sendMail(mailOptions, function (err, info) {\r\n        if(err)\r\n        console.log(err)\r\n        \r\n        else\r\n        console.log(info);\r\n    });\r\n    //sending mail ends\r\n                                                                                                    }});        \r\n                                                newNotification.save();\r\n                                                res.status(200).send({message:\"image reject!\"});\r\n                                            }else{\r\n    \r\n                                                res.status(400).send({message:\"some problem occured\"});\r\n                                            }\r\n                                        \r\n                                        });\r\n    \r\n                                  \r\n                                        }\r\n    \r\n    \r\n                            }else{\r\n    \r\n                                res.status(400).send(err);\r\n                            }\r\n    \r\n                        \r\n                    });\r\n                        \r\n                        \r\n     \r\n     \r\n                 }else{\r\n                     res.status(400).json({ message: 'invalid token!' });\r\n     \r\n                 }\r\n           \r\n             }\r\n            \r\n         }else{\r\n     \r\n                 res.status(400).send(err);\r\n             }\r\n       \r\n     });\r\n         }\r\n                 });\r\n       });\r\n       //GET REQUESTS BY DYNAMIC QUERY\r\n    api.get('/dynamic/:token/:query/:sortby/:page', (req, res) => {\r\n        //check token\r\n          Login.findOne({token:req.params.token},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not Login!' },);\r\n         }else{\r\n            \r\n    \r\n                let sort=[\"date\",\"rating\"];\r\n                let sortby=\"date\";\r\n                if(sort.indexOf(req.params.sortby) > -1){\r\n\r\n                    sortby=req.params.sortby;\r\n                }\r\n                //checking if page number is correct\r\n                let pageNumber=1\r\n        \r\n                if(!isNaN(req.params.page)){\r\n                   pageNumber=req.params.page;\r\n                 }\r\n                 //async query start here\r\n                 \r\n                 let qry=JSON.parse(decodeURIComponent(req.params.query));\r\n    \r\n                 var countQuery = function(callback){\r\n                    Product.find(qry, function(err, doc){\r\n                          if(err){ callback(err, null) }\r\n                          else{\r\n                              callback(null, doc.length);\r\n                           }\r\n                    }\r\n                    )};\r\n            \r\n               var retrieveQuery = function(callback){\r\n                 \r\n                   Product.find(qry).skip((pageNumber-1)*12).sort({sortby: -1}).limit(12).exec(function(err, doc){\r\n                    if(err){ callback(err, null) }\r\n                    else{\r\n                        callback(null, doc);\r\n                     }\r\n              });\r\n                   \r\n              };\r\n            \r\n \r\n               async.parallel([countQuery, retrieveQuery], function(err, results){\r\n                   if(err){\r\n                   // console.log(\"error here\");\r\n                    res.status(500).send(err);\r\n                   }else{\r\n                    res.status(200).json({total_pages:Math.floor(results[0]/12+1) , page: pageNumber, products: results[1]});\r\n                   }\r\n               });\r\n           \r\n         }\r\n                 });\r\n       });  \r\n         //GET Requests BY SEARCH QUERY\r\n    api.get('/search/:token/:search/:page', (req, res) => {\r\n        //check token\r\n          Login.findOne({token:req.params.token},(err,user)=>{\r\n            if(user==undefined){\r\n             res.status(400).json({ message: 'User not Login!' },);\r\n         }else{\r\n                \r\n                //checking if page number is correct\r\n                let pageNumber=1\r\n        \r\n                if(!isNaN(req.params.page)){\r\n                   pageNumber=req.params.page;\r\n                 }\r\n                 //async query start here\r\n                 var countQuery = function(callback){\r\n                    Requests.find({requestName: new RegExp(req.params.search,\"i\")}, function(err, doc){\r\n                          if(err){ callback(err, null) }\r\n                          else{\r\n                              callback(null, doc.length);\r\n                           }\r\n                    }\r\n                    )};\r\n            \r\n               var retrieveQuery = function(callback){\r\n                Requests.find({requestName: new RegExp(req.params.search,\"i\")}).skip((pageNumber-1)*12).limit(12).exec(function(err, doc){\r\n                    if(err){ callback(err, null) }\r\n                    else{\r\n                        callback(null, doc);\r\n                     }\r\n              });\r\n                   \r\n              };\r\n            \r\n               async.parallel([countQuery, retrieveQuery], function(err, results){\r\n                   if(err){\r\n                   // console.log(\"error here\");\r\n                    res.status(500).send(err);\r\n                   }else{\r\n                    res.status(200).json({total_pages:Math.floor(results[0]/12+1) , page: pageNumber, products: results[1]});\r\n                   }\r\n               });\r\n            \r\n         }\r\n                 });\r\n       });            \r\n  return api;\r\n}\r\n"]}