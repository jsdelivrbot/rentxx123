{"version":3,"sources":["../../src/controller/notification.js"],"names":["config","db","api","post","req","res","findOne","email","body","err","user","undefined","status","json","message","login","token","pageNumber","isNaN","page","console","log","countQuery","callback","find","userId","_id","doc","length","retrieveQuery","skip","sort","time","limit","exec","parallel","results","send","total_pages","Math","floor","products","update","$set","saw","multi","notification"],"mappings":"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","file":"notification.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport async from 'async';\r\nimport Login from '../model/login';\r\nimport User from '../model/user';\r\nimport Notification from '../model/notification';\r\nimport bodyParser from 'body-parser';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n\r\n//v1/notification/get\r\napi.post('/get', (req, res) => {\r\n    //check password or match password token\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token ){  //token matching and only admin can add\r\n                  \r\n                    //checking if page number is correct\r\n                    let pageNumber=1\r\n            \r\n                    if(!isNaN(req.body.page)){\r\n                       pageNumber=req.body.page;\r\n                     }\r\n                     //async query start here\r\n                     console.log(\"query started\");\r\n                     var countQuery = function(callback){\r\n                         Notification.find({userId:user._id}, function(err, doc){\r\n                              if(err){ callback(err, null) }\r\n                              else{\r\n                                  callback(null, doc.length);\r\n                               }\r\n                        }\r\n                        )};\r\n                \r\n                   var retrieveQuery = function(callback){\r\n                       console.log((pageNumber-1)*12);\r\n                          Notification.find({userId:user._id}).skip((pageNumber-1)*12).sort({time: -1}).limit(12).exec(function(err, doc){\r\n                        if(err){ callback(err, null) }\r\n                        else{\r\n                            callback(null, doc);\r\n                         }\r\n                  });\r\n                       \r\n                  };\r\n                \r\n                console.log(retrieveQuery);\r\n                   async.parallel([countQuery, retrieveQuery], function(err, results){\r\n                        //err contains the array of error of all the functions\r\n                        //results contains an array of all the results\r\n                        //results[0] will contain value of doc.length from countQuery function\r\n                        //results[1] will contain doc of retrieveQuery function\r\n                        //You can send the results as\r\n                       if(err){\r\n                       // console.log(\"error here\");\r\n                        res.status(500).send(err);\r\n                       }else{\r\n                        res.status(200).json({total_pages:Math.floor(results[0]/12+1) , page: pageNumber, products: results[1]});\r\n                       }\r\n                   });\r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n   //v1/notification/\r\napi.post('/saw', (req, res) => {\r\n    //check password or match password token\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token ){  //token matching and only admin can add\r\n                     \r\n                   Notification.update({userId:user._id},{$set:{saw:1}},{multi: true},(err,notification)=>{\r\n                    if(!err){\r\n                        if(notification===undefined){\r\n\r\n                            res.status(400).json({message:\"no notification found!\"});\r\n                        }else{\r\n\r\n                            res.status(200).json({message:\"saw notifications!\"});\r\n                        }\r\n\r\n                    }else{\r\n\r\n                        res.status(500).send(err);\r\n                    }\r\n\r\n                   }); \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n  return api;\r\n}\r\n"]}