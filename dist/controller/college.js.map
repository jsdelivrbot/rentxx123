{"version":3,"sources":["../../src/controller/college.js"],"names":["config","db","api","post","req","res","findOne","email","body","err","user","undefined","status","json","message","login","token","userType","newcollege","name","city","save","send","put","findById","params","id","college","delete","remove"],"mappings":"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","file":"college.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport Login from '../model/login';\r\nimport User from '../model/user';\r\nimport Product from '../model/product';\r\nimport College from '../model/college';\r\nimport bodyParser from 'body-parser';\r\nexport default({ config, db }) => {\r\n  let api = Router();\r\n//adding a college\r\n//v1/college/add\r\n  api.post('/add', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token && user.userType>0){  //token matching and only admin can add\r\n               let newcollege=new College();\r\n               newcollege.name=req.body.name;\r\n               newcollege.city=req.body.city;\r\n               newcollege.save((err)=>{\r\n\r\n                if(!err){\r\n\r\n                    res.status(200).send({message:\"college added!\"});\r\n                }else{\r\n                    res.status(500).send(err);\r\n                }\r\n               });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n//v1/college/update\r\n  api.put('/update/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token && user.userType>0){  //token matching and only admin can add\r\n              \r\n\r\n              College.findById((req.params.id),(err,college)=>{\r\n\r\n                    if(!err){\r\n                        if(college===undefined){\r\n                            res.status(400).send({message:\"no such college exsist!\"});\r\n\r\n                        }else{\r\n                        college.name=req.body.name;\r\n                        college.city=req.body.city;\r\n                        college.save((err)=>{\r\n\r\n                            if(err){\r\n\r\n                                res.status(500).send(err);\r\n                            }else{\r\n\r\n                                res.status(200).send({message:\"college updated!\"});\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                    }else{\r\n\r\n                        res.status(500).send(err);\r\n                    }\r\n\r\n              });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n\r\n   //v1/college/update\r\n  api.delete('/delete/:id', (req, res) => {\r\n    //check password or match password\r\n      User.findOne({email:req.body.email},(err,user)=>{\r\n        if(user==undefined){\r\n         res.status(400).json({ message: 'User not found!' });\r\n     }else{\r\n Login.findOne({email:req.body.email},(err,login)=>{\r\n \r\n     if(!err){\r\n \r\n         if(login==undefined){ //user not found\r\n \r\n             res.status(400).json({ message: 'User not Logged In!' });\r\n         }else{\r\n \r\n             if(login.token==req.body.token && user.userType>0){  //token matching and only admin can add\r\n              \r\n\r\n              College.findById((req.params.id),(err,college)=>{\r\n\r\n                    if(!err){\r\n                        if(college===undefined){\r\n                            res.status(400).send({message:\"no such college exsist!\"});\r\n\r\n                        }else{\r\n                        college.remove((err)=>{\r\n\r\n                            if(!err){\r\n\r\n                                res.status(200).send({message:\"college deleted!\"});\r\n                            }else{\r\n\r\n                                res.status(500).send(err);\r\n                            }\r\n                        });\r\n                    }\r\n                    }else{\r\n\r\n                        res.status(500).send(err);\r\n                    }\r\n\r\n              });\r\n                    \r\n                    \r\n \r\n \r\n             }else{\r\n                 res.status(400).json({ message: 'invalid token!' });\r\n \r\n             }\r\n       \r\n         }\r\n        \r\n     }else{\r\n \r\n             res.status(400).send(err);\r\n         }\r\n   \r\n });\r\n     }\r\n             });\r\n   });\r\n  return api;\r\n}\r\n"]}